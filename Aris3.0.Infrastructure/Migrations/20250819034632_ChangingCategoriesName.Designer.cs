// <auto-generated />
using System;
using Aris3._0.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Aris3._0.Infrastructure.Migrations
{
    [DbContext(typeof(ArisDbContext))]
    [Migration("20250819034632_ChangingCategoriesName")]
    partial class ChangingCategoriesName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActorFilm", b =>
                {
                    b.Property<int>("Actorsid")
                        .HasColumnType("int");

                    b.Property<string>("FilmsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Actorsid", "FilmsId");

                    b.HasIndex("FilmsId");

                    b.ToTable("ActorFilm", (string)null);
                });

            modelBuilder.Entity("Aris3._0.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AccountStat")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            AccountStat = true,
                            Created = new DateTime(2025, 8, 19, 3, 46, 32, 79, DateTimeKind.Utc).AddTicks(292),
                            Email = "admin@gmail.com",
                            LastUpdated = new DateTime(2025, 8, 19, 3, 46, 32, 79, DateTimeKind.Utc).AddTicks(292),
                            Password = "admin123",
                            PersonId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Role = "Admin",
                            SubscriptionId = 1,
                            UserName = "admin",
                            status = true
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            AccountStat = true,
                            Created = new DateTime(2025, 8, 19, 3, 46, 32, 79, DateTimeKind.Utc).AddTicks(292),
                            Email = "user1@gmail.com",
                            LastUpdated = new DateTime(2025, 8, 19, 3, 46, 32, 79, DateTimeKind.Utc).AddTicks(292),
                            Password = "user123",
                            PersonId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Role = "User",
                            SubscriptionId = 2,
                            UserName = "user1",
                            status = true
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            AccountStat = true,
                            Created = new DateTime(2025, 8, 19, 3, 46, 32, 79, DateTimeKind.Utc).AddTicks(292),
                            Email = "user2@gmail.com",
                            LastUpdated = new DateTime(2025, 8, 19, 3, 46, 32, 79, DateTimeKind.Utc).AddTicks(292),
                            Password = "user123",
                            PersonId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            Role = "User",
                            SubscriptionId = 3,
                            UserName = "user2",
                            status = true
                        });
                });

            modelBuilder.Entity("Aris3._0.Domain.Entities.Actor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("Aris3._0.Domain.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Aris3._0.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Aris3._0.Domain.Entities.Created", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Created");
                });

            modelBuilder.Entity("Aris3._0.Domain.Entities.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("Aris3._0.Domain.Entities.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkEmbed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkM3U8")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("Aris3._0.Domain.Entities.Film", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ChieuRap")
                        .HasColumnType("bit");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Createdid")
                        .HasColumnType("int");

                    b.Property<string>("EpisodeCurrent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EpisodeTotal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCopyright")
                        .HasColumnType("bit");

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Like")
                        .HasColumnType("int");

                    b.Property<int>("Modifiedid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notify")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Quality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Showtimes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SubDocquyen")
                        .HasColumnType("bit");

                    b.Property<string>("ThumbUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TmdbId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("View")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Createdid");

                    b.HasIndex("Modifiedid");

                    b.HasIndex("TmdbId");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("Aris3._0.Domain.Entities.Modified", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Modified");
                });

            modelBuilder.Entity("Aris3._0.Domain.Entities.Otp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AccounId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccounId");

                    b.ToTable("Otps");
                });

            modelBuilder.Entity("Aris3._0.Domain.Entities.Person", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AccountStat")
                        .HasColumnType("bit");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            AccountStat = true,
                            City = "Hanoi",
                            Country = "Vn",
                            Created = new DateTime(2025, 8, 19, 3, 46, 32, 79, DateTimeKind.Utc).AddTicks(292),
                            Email = "admin@gmail.com",
                            LastUpdated = new DateTime(2025, 8, 19, 3, 46, 32, 79, DateTimeKind.Utc).AddTicks(292),
                            Name = "Admin Person",
                            PhoneNumber = "0123456789",
                            Region = "Sea",
                            Role = "Admin",
                            State = "HN",
                            Zipcode = "100000"
                        },
                        new
                        {
                            id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            AccountStat = true,
                            City = "HCMC",
                            Country = "Vn",
                            Created = new DateTime(2025, 8, 19, 3, 46, 32, 79, DateTimeKind.Utc).AddTicks(292),
                            Email = "user1@gmail.com",
                            LastUpdated = new DateTime(2025, 8, 19, 3, 46, 32, 79, DateTimeKind.Utc).AddTicks(292),
                            Name = "User One",
                            PhoneNumber = "0987654321",
                            Region = "Sea",
                            Role = "User",
                            State = "HCM",
                            Zipcode = "700000"
                        },
                        new
                        {
                            id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            AccountStat = true,
                            City = "Danang",
                            Country = "Vn",
                            Created = new DateTime(2025, 8, 19, 3, 46, 32, 79, DateTimeKind.Utc).AddTicks(292),
                            Email = "user2@gmail.com",
                            LastUpdated = new DateTime(2025, 8, 19, 3, 46, 32, 79, DateTimeKind.Utc).AddTicks(292),
                            Name = "User Two",
                            PhoneNumber = "0911222333",
                            Region = "Sea",
                            Role = "User",
                            State = "DN",
                            Zipcode = "550000"
                        });
                });

            modelBuilder.Entity("Aris3._0.Domain.Entities.Server", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FilmId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("Aris3._0.Domain.Entities.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 8, 19, 3, 46, 32, 79, DateTimeKind.Utc).AddTicks(292),
                            Description = "Access to standard features and content.",
                            Name = "Basic Plan",
                            UpdatedDate = new DateTime(2025, 8, 19, 3, 46, 32, 79, DateTimeKind.Utc).AddTicks(292),
                            type = "Basic"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 8, 19, 3, 46, 32, 79, DateTimeKind.Utc).AddTicks(292),
                            Description = "Includes HD streaming and exclusive content.",
                            Name = "Premium Plan",
                            UpdatedDate = new DateTime(2025, 8, 19, 3, 46, 32, 79, DateTimeKind.Utc).AddTicks(292),
                            type = "Premium"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 8, 19, 3, 46, 32, 79, DateTimeKind.Utc).AddTicks(292),
                            Description = "For organizations with extended access and multiple accounts.",
                            Name = "Enterprise Plan",
                            UpdatedDate = new DateTime(2025, 8, 19, 3, 46, 32, 79, DateTimeKind.Utc).AddTicks(292),
                            type = "Enterprise"
                        });
                });

            modelBuilder.Entity("Aris3._0.Domain.Entities.Tmbd", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Season")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Vote_average")
                        .HasColumnType("real");

                    b.Property<int>("Vote_count")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tmbd");
                });

            modelBuilder.Entity("CategoryFilm", b =>
                {
                    b.Property<string>("CategoriesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FilmsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CategoriesId", "FilmsId");

                    b.HasIndex("FilmsId");

                    b.ToTable("CategoryFilm", (string)null);
                });

            modelBuilder.Entity("CountryFilm", b =>
                {
                    b.Property<Guid>("CountriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FilmsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CountriesId", "FilmsId");

                    b.HasIndex("FilmsId");

                    b.ToTable("CountryFilm", (string)null);
                });

            modelBuilder.Entity("DirectorFilm", b =>
                {
                    b.Property<int>("DirectorsId")
                        .HasColumnType("int");

                    b.Property<string>("FilmsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DirectorsId", "FilmsId");

                    b.HasIndex("FilmsId");

                    b.ToTable("DirectorFilm", (string)null);
                });

            modelBuilder.Entity("ActorFilm", b =>
                {
                    b.HasOne("Aris3._0.Domain.Entities.Actor", null)
                        .WithMany()
                        .HasForeignKey("Actorsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aris3._0.Domain.Entities.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aris3._0.Domain.Entities.Account", b =>
                {
                    b.HasOne("Aris3._0.Domain.Entities.Person", "Person")
                        .WithOne("Account")
                        .HasForeignKey("Aris3._0.Domain.Entities.Account", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aris3._0.Domain.Entities.Subscription", "Subscription")
                        .WithMany("accounts")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Aris3._0.Domain.Entities.Episode", b =>
                {
                    b.HasOne("Aris3._0.Domain.Entities.Server", "Server")
                        .WithMany("Episodes")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Aris3._0.Domain.Entities.Film", b =>
                {
                    b.HasOne("Aris3._0.Domain.Entities.Created", "Created")
                        .WithMany()
                        .HasForeignKey("Createdid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aris3._0.Domain.Entities.Modified", "Modified")
                        .WithMany()
                        .HasForeignKey("Modifiedid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aris3._0.Domain.Entities.Tmbd", "Tmdb")
                        .WithMany()
                        .HasForeignKey("TmdbId");

                    b.Navigation("Created");

                    b.Navigation("Modified");

                    b.Navigation("Tmdb");
                });

            modelBuilder.Entity("Aris3._0.Domain.Entities.Otp", b =>
                {
                    b.HasOne("Aris3._0.Domain.Entities.Account", "Account")
                        .WithMany("Otps")
                        .HasForeignKey("AccounId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Aris3._0.Domain.Entities.Server", b =>
                {
                    b.HasOne("Aris3._0.Domain.Entities.Film", "Film")
                        .WithMany("Servers")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");
                });

            modelBuilder.Entity("CategoryFilm", b =>
                {
                    b.HasOne("Aris3._0.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aris3._0.Domain.Entities.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryFilm", b =>
                {
                    b.HasOne("Aris3._0.Domain.Entities.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aris3._0.Domain.Entities.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DirectorFilm", b =>
                {
                    b.HasOne("Aris3._0.Domain.Entities.Director", null)
                        .WithMany()
                        .HasForeignKey("DirectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aris3._0.Domain.Entities.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aris3._0.Domain.Entities.Account", b =>
                {
                    b.Navigation("Otps");
                });

            modelBuilder.Entity("Aris3._0.Domain.Entities.Film", b =>
                {
                    b.Navigation("Servers");
                });

            modelBuilder.Entity("Aris3._0.Domain.Entities.Person", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();
                });

            modelBuilder.Entity("Aris3._0.Domain.Entities.Server", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("Aris3._0.Domain.Entities.Subscription", b =>
                {
                    b.Navigation("accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
